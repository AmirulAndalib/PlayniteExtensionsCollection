<PluginUserControl x:Class="ExtraMetadataLoader.VideoPlayerControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ExtraMetadataLoader"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Name="ControlGrid" Visibility="{Binding ControlVisibility}" MinHeight="120">
        <Grid.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}" />
        </Grid.Resources>
        <Grid>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Visible" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActiveViewAtCreation, TargetNullValue=None}" Value="Details" />
                                <Condition Binding="{Binding SettingsModel.Settings.ShowVideoPreviewNotPlayingDetails}" Value="False" />
                                <Condition Binding="{Binding SettingsModel.Settings.IsVideoPlaying}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Hidden" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActiveViewAtCreation, TargetNullValue=None}" Value="Grid" />
                                <Condition Binding="{Binding SettingsModel.Settings.ShowVideoPreviewNotPlayingGrid}" Value="False" />
                                <Condition Binding="{Binding SettingsModel.Settings.IsVideoPlaying}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Hidden" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ActiveViewAtCreation, TargetNullValue=None}" Value="None" />
                                <Condition Binding="{Binding SettingsModel.Settings.ShowVideoPreviewNotPlayingGeneric}" Value="False" />
                                <Condition Binding="{Binding SettingsModel.Settings.IsVideoPlaying}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Hidden" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <MediaElement Name="player" MediaOpened="player_MediaOpened" MediaEnded="player_MediaEnded"
                      LoadedBehavior="Manual" ScrubbingEnabled="True" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Top">
                <MediaElement.Style>
                    <Style>
                        <Setter Property="MediaElement.Source" Value="{Binding VideoSource, UpdateSourceTrigger=PropertyChanged}" />
                        <Style.Triggers>
                            <!--This helps to prevent the video from playing in themes that don't have the
                            video player visible at first, for example, when the video player is only visible
                            after clicking a button-->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsVisible}" Value="False">
                                <Setter Property="MediaElement.Source" Value="{x:Null}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MediaElement.Style>
            </MediaElement>
        </Grid>
        <Border Padding="10,5,10,10" VerticalAlignment="{Binding SettingsModel.Settings.VideoControlsVerticalAlignment}">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Opacity" Value="{Binding SettingsModel.Settings.VideoControlsOpacity}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True">
                            <Setter Property="Opacity" Value="{Binding SettingsModel.Settings.VideoControlsOpacityMouseOver}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=ControlGrid, Path=IsMouseOver}" Value="True">
                            <Setter Property="Opacity" Value="{Binding SettingsModel.Settings.VideoControlsOpacityMouseOver}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <WrapPanel>
                <Button DockPanel.Dock="Left" Name="PlayButton" FontSize="24" Command="{Binding VideoPlayCommand}" Content="&#xECA7;"
                        FontFamily="{DynamicResource FontIcoFont}" Margin="0,0,10,0" Padding="5" Visibility="{Binding SettingsModel.Settings.IsVideoPlaying, Converter={StaticResource InvertedBooleanToVisibilityConverter}}" />
                <Button DockPanel.Dock="Left" Name="PauseButton" FontSize="24" Command="{Binding VideoPauseCommand}" Content="&#xECA5;"
                        FontFamily="{DynamicResource FontIcoFont}" Margin="0,0,10,0" Padding="5" Visibility="{Binding SettingsModel.Settings.IsVideoPlaying, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <Button DockPanel.Dock="Left" Name="MuteButton" FontSize="24" Command="{Binding VideoMuteCommand}" Content="&#xECB8;"
                        FontFamily="{DynamicResource FontIcoFont}" Margin="0,0,10,0" Padding="5" />
                <TextBlock DockPanel.Dock="Left" Text="{Binding PlaybackTimeProgress}" VerticalAlignment="Center" Margin="5,0,0,0"/>
                <TextBlock DockPanel.Dock="Left" Text="/" VerticalAlignment="Center" Margin="0,0,0,0"/>
                <TextBlock DockPanel.Dock="Left" Text="{Binding PlaybackTimeTotal}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <Button DockPanel.Dock="Right" Name="SwitchVideoSourceButton" FontSize="24" Command="{Binding SwitchVideoSourceCommand}" Content="&#xEB2C;"
                        FontFamily="{DynamicResource FontIcoFont}" Margin="0,0,10,0" Padding="5" />
                <Grid Margin="0,0,0,0" MinWidth="300" MaxWidth="600">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <Grid Name="SliderGrid" Grid.Column="0" Margin="0,0,10,0">
                        <ProgressBar x:Name="playbackProgressBar" Height="20" Padding="0" Width="{Binding ElementName=SliderGrid, Path=Width}"/>
                        <Slider x:Name="timelineSlider" Height="{Binding ElementName=playbackProgressBar, Path=ActualHeight}" IsMoveToPointEnabled="True" Width="{Binding ElementName=SliderGrid, Path=Width}" VerticalAlignment="Center"
                                Thumb.DragStarted="timelineSlider_DragStarted" Thumb.DragCompleted="timelineSlider_DragCompleted" />
                    </Grid>
                    <DockPanel Grid.Column="1">
                        <TextBlock DockPanel.Dock="Left" Text="&#xEC94;" FontSize="24" FontFamily="{DynamicResource FontIcoFont}" VerticalAlignment="Center" Margin="0,0,8,0"/>
                        <Slider DockPanel.Dock="Left" Name="volumeSlider" VerticalAlignment="Center" VerticalContentAlignment="Center"
                                Minimum="0" Maximum="1" IsSnapToTickEnabled="True" TickFrequency="0.025"/>
                    </DockPanel>
                </Grid>
            </WrapPanel>
        </Border>
    </Grid>
</PluginUserControl>
